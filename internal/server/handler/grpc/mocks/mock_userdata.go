// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ktigay/goph-keeper/internal/server/handler/grpc (interfaces: UserDataService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ktigay/goph-keeper/internal/entity"
)

// MockUserDataService is a mock of UserDataService interface.
type MockUserDataService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataServiceMockRecorder
}

// MockUserDataServiceMockRecorder is the mock recorder for MockUserDataService.
type MockUserDataServiceMockRecorder struct {
	mock *MockUserDataService
}

// NewMockUserDataService creates a new mock instance.
func NewMockUserDataService(ctrl *gomock.Controller) *MockUserDataService {
	mock := &MockUserDataService{ctrl: ctrl}
	mock.recorder = &MockUserDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataService) EXPECT() *MockUserDataServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDataService) Create(arg0 context.Context, arg1 string, arg2 entity.UserData) (*entity.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserDataServiceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDataService)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUserDataService) Delete(arg0 context.Context, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserDataServiceMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDataService)(nil).Delete), varargs...)
}

// Read mocks base method.
func (m *MockUserDataService) Read(arg0 context.Context, arg1 string, arg2 ...string) ([]entity.UserData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].([]entity.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockUserDataServiceMockRecorder) Read(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUserDataService)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockUserDataService) Update(arg0 context.Context, arg1 string, arg2 entity.UserData) (*entity.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserDataServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDataService)(nil).Update), arg0, arg1, arg2)
}
