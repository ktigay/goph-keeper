// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: contracts/user_data.v1.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserDataService_CreateUserDataItem_FullMethodName  = "/user.data.v1.UserDataService/CreateUserDataItem"
	UserDataService_UpdateUserDataItem_FullMethodName  = "/user.data.v1.UserDataService/UpdateUserDataItem"
	UserDataService_GetUserDataItem_FullMethodName     = "/user.data.v1.UserDataService/GetUserDataItem"
	UserDataService_GetUserDataItems_FullMethodName    = "/user.data.v1.UserDataService/GetUserDataItems"
	UserDataService_DeleteUserDataItems_FullMethodName = "/user.data.v1.UserDataService/DeleteUserDataItems"
)

// UserDataServiceClient is the client API for UserDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataServiceClient interface {
	CreateUserDataItem(ctx context.Context, in *CreateUserDataItemRequest, opts ...grpc.CallOption) (*CreateUserDataItemResponse, error)
	UpdateUserDataItem(ctx context.Context, in *UpdateUserDataItemRequest, opts ...grpc.CallOption) (*UpdateUserDataItemResponse, error)
	GetUserDataItem(ctx context.Context, in *GetUserDataItemRequest, opts ...grpc.CallOption) (*GetUserDataItemResponse, error)
	GetUserDataItems(ctx context.Context, in *GetUserDataItemsRequest, opts ...grpc.CallOption) (*GetUserDataItemsResponse, error)
	DeleteUserDataItems(ctx context.Context, in *DeleteUserDataItemsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataServiceClient(cc grpc.ClientConnInterface) UserDataServiceClient {
	return &userDataServiceClient{cc}
}

func (c *userDataServiceClient) CreateUserDataItem(ctx context.Context, in *CreateUserDataItemRequest, opts ...grpc.CallOption) (*CreateUserDataItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserDataItemResponse)
	err := c.cc.Invoke(ctx, UserDataService_CreateUserDataItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) UpdateUserDataItem(ctx context.Context, in *UpdateUserDataItemRequest, opts ...grpc.CallOption) (*UpdateUserDataItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDataItemResponse)
	err := c.cc.Invoke(ctx, UserDataService_UpdateUserDataItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) GetUserDataItem(ctx context.Context, in *GetUserDataItemRequest, opts ...grpc.CallOption) (*GetUserDataItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataItemResponse)
	err := c.cc.Invoke(ctx, UserDataService_GetUserDataItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) GetUserDataItems(ctx context.Context, in *GetUserDataItemsRequest, opts ...grpc.CallOption) (*GetUserDataItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataItemsResponse)
	err := c.cc.Invoke(ctx, UserDataService_GetUserDataItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) DeleteUserDataItems(ctx context.Context, in *DeleteUserDataItemsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserDataService_DeleteUserDataItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServiceServer is the server API for UserDataService service.
// All implementations must embed UnimplementedUserDataServiceServer
// for forward compatibility.
type UserDataServiceServer interface {
	CreateUserDataItem(context.Context, *CreateUserDataItemRequest) (*CreateUserDataItemResponse, error)
	UpdateUserDataItem(context.Context, *UpdateUserDataItemRequest) (*UpdateUserDataItemResponse, error)
	GetUserDataItem(context.Context, *GetUserDataItemRequest) (*GetUserDataItemResponse, error)
	GetUserDataItems(context.Context, *GetUserDataItemsRequest) (*GetUserDataItemsResponse, error)
	DeleteUserDataItems(context.Context, *DeleteUserDataItemsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserDataServiceServer()
}

// UnimplementedUserDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDataServiceServer struct{}

func (UnimplementedUserDataServiceServer) CreateUserDataItem(context.Context, *CreateUserDataItemRequest) (*CreateUserDataItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDataItem not implemented")
}
func (UnimplementedUserDataServiceServer) UpdateUserDataItem(context.Context, *UpdateUserDataItemRequest) (*UpdateUserDataItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDataItem not implemented")
}
func (UnimplementedUserDataServiceServer) GetUserDataItem(context.Context, *GetUserDataItemRequest) (*GetUserDataItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataItem not implemented")
}
func (UnimplementedUserDataServiceServer) GetUserDataItems(context.Context, *GetUserDataItemsRequest) (*GetUserDataItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataItems not implemented")
}
func (UnimplementedUserDataServiceServer) DeleteUserDataItems(context.Context, *DeleteUserDataItemsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDataItems not implemented")
}
func (UnimplementedUserDataServiceServer) mustEmbedUnimplementedUserDataServiceServer() {}
func (UnimplementedUserDataServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataServiceServer will
// result in compilation errors.
type UnsafeUserDataServiceServer interface {
	mustEmbedUnimplementedUserDataServiceServer()
}

func RegisterUserDataServiceServer(s grpc.ServiceRegistrar, srv UserDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDataService_ServiceDesc, srv)
}

func _UserDataService_CreateUserDataItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDataItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).CreateUserDataItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_CreateUserDataItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).CreateUserDataItem(ctx, req.(*CreateUserDataItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_UpdateUserDataItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDataItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).UpdateUserDataItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_UpdateUserDataItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).UpdateUserDataItem(ctx, req.(*UpdateUserDataItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_GetUserDataItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).GetUserDataItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_GetUserDataItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).GetUserDataItem(ctx, req.(*GetUserDataItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_GetUserDataItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).GetUserDataItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_GetUserDataItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).GetUserDataItems(ctx, req.(*GetUserDataItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_DeleteUserDataItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).DeleteUserDataItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_DeleteUserDataItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).DeleteUserDataItems(ctx, req.(*DeleteUserDataItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataService_ServiceDesc is the grpc.ServiceDesc for UserDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.data.v1.UserDataService",
	HandlerType: (*UserDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserDataItem",
			Handler:    _UserDataService_CreateUserDataItem_Handler,
		},
		{
			MethodName: "UpdateUserDataItem",
			Handler:    _UserDataService_UpdateUserDataItem_Handler,
		},
		{
			MethodName: "GetUserDataItem",
			Handler:    _UserDataService_GetUserDataItem_Handler,
		},
		{
			MethodName: "GetUserDataItems",
			Handler:    _UserDataService_GetUserDataItems_Handler,
		},
		{
			MethodName: "DeleteUserDataItems",
			Handler:    _UserDataService_DeleteUserDataItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/user_data.v1.proto",
}
